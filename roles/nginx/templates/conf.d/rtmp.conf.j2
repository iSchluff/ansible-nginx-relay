include /usr/share/nginx/modules-available/mod-rtmp.conf;

# important for multi worker processes!!1!
rtmp_auto_push on;

rtmp {
  log_format rtmp '"$remote_addr [$time_local] $command "$app" "$name" "$args" - $bytes_received $bytes_sent ($session_readable_time)"';
  access_log /var/log/nginx/rtmp_access.log rtmp;

  server {
    listen [::]:1935 ipv6only=off;
    ping 30s;

    # Disable audio until first video frame is sent.
    wait_video on;

    # Send NetStream.Publish.Start and NetStream.Publish.Stop to subscribers.
    publish_notify on;

    # Synchronize audio and video streams. If subscriber bandwidth is not
    # enough to receive data at publisher rate some frames are dropped by
    # the server. This leads to synchronization problem. When timestamp
    # difference exceeds the value specified as sync argument an absolute
    # frame is sent fixing that. Default is 300ms.
    sync 10ms;

    # stream with forward to icecast
    application stream {
      # enable live streaming
      live on;
      meta copy;

      hls off;

      allow publish all;
      allow play all;

      {% if rtmp_auth is defined and rtmp_auth|bool -%}
      # authenticate stream publish against backend
      on_publish http://127.0.0.1:8080/publish;
      on_publish_done http://127.0.0.1:8080/unpublish;
      {% endif %}

      # forward streams to local icecast
      #exec ffmpeg -v warning -nostats -nostdin -y -analyzeduration 1000000
      #  -i rtmp://127.0.0.1/$app/$name
      #  -c copy -map 0:v:0 -map 0:a:0
      #  -f matroska -content_type video/webm -password abc
      #  icecast://127.0.0.1:8000/${name};
    }

    # relay only
    application relay {
      live on;
      meta copy;

      hls off;

      allow publish all;
      allow play all;
    }
  }
}
